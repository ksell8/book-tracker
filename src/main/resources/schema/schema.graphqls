scalar Year

type Query {
    bookById(id: ID): Book
    bookByName(name: String!): Book
    books(pageNumber: Int, pageSize: Int): PageBook
}

type Mutation{
    addBook(bookInput: BookInput): Book
    deleteById(id: ID): Boolean
}

type Book {
    id: ID
    name: String!
    author: String!
    status: Status!
    publisher: String
    publishedYear: Year
    genre: Genre
}

input BookInput{
    name: String!
    author: String!
    status: Status!
    publisher: String
    publishedYear: Year
    genre: Genre
}

enum Status {
  READ
  READING
  TO_READ
}

enum Genre{
    POETRY
    PHILOSOPHY
    MEMOIR
    NONFICTION
    SCI_FI
    HORROR
    FICTION
}

type PageBook {
    content: [Book]          # The list of books
    totalPages: Int          # Total number of pages
    totalElements: Int       # Total number of books
    size: Int                # Page size
    number: Int              # Current page number
    numberOfElements: Int    # Number of elements on the current page
    hasNext: Boolean         # Whether there's a next page
    hasPrevious: Boolean     # Whether there's a previous page
}